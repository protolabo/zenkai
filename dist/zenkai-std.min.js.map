{"version":3,"file":"zenkai-std.min.js","sources":["../src/std/std-parse.js","../src/std/std-datetime.js","../src/std/std-object.js","../src/std/std-string.js","../src/std/std-logic.js","../src/std/std-path.js","../src/std/std-convert.js","../src/std/std-ajax.js","../src/std/std-array.js","../src/std/std-math.js"],"sourcesContent":["/**\r\n * Returns an object value or default value if undefined\r\n * @param {*} arg object\r\n * @param {*} value default value\r\n * @param {boolean} [isNullable=false] indicates whether the value can be assigned the value *NULL*\r\n * @memberof STD\r\n */\r\nexport function valOrDefault(arg, value, isNullable = false) {\r\n    if (isNullable) {\r\n        return isUndefined(arg) ? value : arg;\r\n    }\r\n\r\n    return isNullOrUndefined(arg) ? value : arg;\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the value is empty\r\n * @param {Object[]|string} arr array\r\n * @returns {boolean}\r\n * @memberof STD\r\n */\r\nexport function isEmpty(obj) {\r\n    return isIterable(obj) && obj.length === 0;\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the variable is a Date\r\n * @param {*} value \r\n * @returns {boolean}\r\n * @memberof STD\r\n */\r\nexport function isDate(value) {\r\n    return value instanceof Date || (typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]');\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the variable is a String\r\n * @param {*} value\r\n * @returns {boolean}\r\n * @memberof STD\r\n */\r\nexport function isString(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the value is a Function\r\n * @param {*} value\r\n * @returns {boolean}\r\n * @memberof STD\r\n */\r\nexport function isFunction(value) {\r\n    return typeof value === 'function';\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the value is an Object\r\n * @param {*} value\r\n * @returns {boolean}\r\n * @memberof STD\r\n */\r\nexport function isObject(value) {\r\n    return !isNullOrUndefined(value) && typeof value === 'object';\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the object is iterable\r\n * @param {*} obj\r\n * @returns {boolean}\r\n * @memberof STD\r\n */\r\nexport function isIterable(obj) {\r\n    return !isNullOrUndefined(obj) && typeof obj[Symbol.iterator] === 'function';\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the object is a non-string iterable\r\n * @param {*} obj\r\n * @returns {boolean}\r\n * @memberof STD\r\n */\r\nexport function isCollection(obj) {\r\n    return isIterable(obj) && !isString(obj);\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the value is null\r\n * @param {*} value\r\n * @returns {boolean}\r\n * @memberof STD\r\n */\r\nexport function isNull(value) { \r\n    return value === null; \r\n}\r\n\r\n/**\r\n * Returns a value indicating whether a string is null or made of whitespace.\r\n * @param {string} value string\r\n * @returns {boolean}\r\n * @memberof STD\r\n */\r\nexport function isNullOrWhitespace(value) {\r\n    return (!value || isString(value) && (value.length === 0 || /^\\s*$/.test(value)));\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the value is undefined\r\n * @param {*} value\r\n * @returns {boolean}\r\n * @memberof STD\r\n */\r\nexport function isUndefined(value) { \r\n    return typeof value === 'undefined'; \r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the value is null or undefined\r\n * @param {*} value\r\n * @returns {boolean}\r\n * @memberof STD\r\n */\r\nexport function isNullOrUndefined(value) { \r\n    return isNull(value) || isUndefined(value); \r\n}","import { isNullOrUndefined, isDate } from './std-parse.js';\r\n\r\n\r\n/**\r\n * Compare 2 times\r\n * @param {string} t1 time 1\r\n * @param {string} t2 time 2\r\n * @param {string} [separator=\":\"]\r\n * @returns {number} 1, 0, -1 if t1 > t2, t1 = t2 and t1 < t2 respectively\r\n * @memberof STD\r\n */\r\nexport function compareTime(t1, t2, separator = \":\") {\r\n    if (isNullOrUndefined(t1) || isNullOrUndefined(t2) || !t1.includes(separator) || !t2.includes(separator)) {\r\n        return null;\r\n    }\r\n\r\n    var arr1 = t1.split(separator);\r\n    var arr2 = t2.split(separator);\r\n\r\n    // hour comparison\r\n    if (+arr1[0] > +arr2[0]) {\r\n        return 1;\r\n    } else if (+arr1[0] < +arr2[0]) {\r\n        return -1;\r\n    } else {\r\n        // minute comparison\r\n        if (+arr1[1] > +arr2[1]) {\r\n            return 1;\r\n        } else if (+arr1[1] < +arr2[1]) {\r\n            return -1;\r\n        } else {\r\n            if (arr1.length == arr2.length && arr1.length == 3) {\r\n                // second comparison\r\n                if (+arr1[2] > +arr2[2]) {\r\n                    return 1;\r\n                } else if (+arr1[2] < +arr2[2]) {\r\n                    return -1;\r\n                }\r\n            }\r\n\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Resolves a date value\r\n * @param {*} [value] \r\n * @returns {Date}\r\n  * @memberof STD\r\n */\r\nexport function resolveDate(value, useOffset = true) {\r\n    if (isNullOrUndefined(value)) {\r\n        return new Date();\r\n    } else if (isDate(value)) {\r\n        return value;\r\n    }\r\n\r\n    var date = new Date(value);\r\n    var time = date.getTime();\r\n\r\n    if (Number.isNaN(time)) {\r\n        return new Date();\r\n    }\r\n\r\n    if (useOffset) {\r\n        return new Date(time + date.getTimezoneOffset() * 60000);\r\n    }\r\n\r\n    return date;\r\n}\r\n\r\n/**\r\n * Formats a date\r\n * @param {!Date} date \r\n * @param {!string} format \r\n * @returns {string} Formatted date\r\n * @memberof STD\r\n */\r\nexport function formatDate(date, format) {\r\n    var dd = date.getDate();\r\n    var mm = date.getMonth() + 1;   // January = 0\r\n    var yyyy = date.getFullYear().toString();\r\n    var hh = date.getHours();\r\n    var MM = date.getMinutes();\r\n    var ss = date.getSeconds();\r\n\r\n    const twoDigits = (val) => val < 10 ? `0${val}` : val;\r\n\r\n    return format.replace('yyyy', yyyy)\r\n        .replace('yy', yyyy.slice(-2))\r\n        .replace('mm', twoDigits(mm))\r\n        .replace('m', mm)\r\n        .replace('dd', twoDigits(dd))\r\n        .replace('d', dd)\r\n        .replace('hh', twoDigits(hh))\r\n        .replace('h', hh)\r\n        .replace('MM', twoDigits(MM))\r\n        .replace('M', MM)\r\n        .replace('ss', twoDigits(ss))\r\n        .replace('s', ss);\r\n}\r\n\r\n/**\r\n * Returns a date and time using the format \"YYYY-mm-dd\"\r\n * @param {*} _date \r\n * @returns {string}\r\n * @memberof STD\r\n */\r\nexport function shortDate(_date) {\r\n    var date = resolveDate(_date);\r\n\r\n    return formatDate(date, 'yyyy-mm-dd');\r\n}\r\n\r\n/**\r\n * Returns a date and time using the format \"YYYY-mm-dd hh:MM\"\r\n * @param {*} _date \r\n * @returns {string}\r\n * @memberof STD\r\n */\r\nexport function shortDateTime(_date) {\r\n    var date = resolveDate(_date, false);\r\n\r\n    return formatDate(date, 'yyyy-mm-dd hh:MM');\r\n}","import { isObject, isNullOrUndefined } from \"./std-parse.js\";\r\n\r\n\r\n/** @private */\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n/** @private */\r\nconst isPrototypeOf = Object.prototype.isPrototypeOf;\r\n\r\n\r\n/**\r\n * Returns a boolean indicating whether the object has the specified property as its own property (not inherited).\r\n * @param {*} obj target object\r\n * @param {string} key name of the property\r\n * @memberof STD\r\n */\r\nexport const hasOwn = function (obj, key) {\r\n    return hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Returns a boolean indicating whether the object (child) inherit from another object (parent)\r\n * @param {*} child \r\n * @param {*} parent \r\n * @memberof STD\r\n */\r\nexport const isDerivedOf = function (child, parent) {\r\n    return Object.getPrototypeOf(child) !== parent && isPrototypeOf.call(parent, child);\r\n};\r\n\r\n/**\r\n * Creates a clone of an object\r\n * @param {*} obj Object\r\n * @memberof STD\r\n */\r\nexport function cloneObject(obj) {\r\n    if (isNullOrUndefined(obj) || !isObject(obj)) {\r\n        return obj;\r\n    }\r\n\r\n    var temp = obj.constructor(); // changed\r\n    for (var key in obj) {\r\n        if (hasOwn(obj, key)) {\r\n            obj['isActiveClone'] = null;\r\n            temp[key] = cloneObject(obj[key]);\r\n            delete obj['isActiveClone'];\r\n        }\r\n    }\r\n\r\n    return temp;\r\n}","import { isNullOrWhitespace, isString } from \"./std-parse.js\";\r\nimport { hasOwn } from \"./std-object.js\";\r\n\r\n\r\n/**\r\n * Capitalizes all words in a sequence\r\n * @param {string} str Sequence\r\n * @returns {string} Capitalized sequence\r\n * @memberof STD\r\n */\r\nexport function capitalize(str) {\r\n    if (isNullOrWhitespace(str)) {\r\n        return str;\r\n    }\r\n\r\n    return str.toLowerCase().replace(/\\b\\w/g, (s) => s.toUpperCase());\r\n}\r\n\r\n/**\r\n * Capitalizes the first letter of a sequence\r\n * @param {string} str Sequence\r\n * @returns {string} Sequence with its first letter capitalized\r\n * @memberof STD\r\n */\r\nexport function capitalizeFirstLetter(str) {\r\n    if (isNullOrWhitespace(str)) {\r\n        return str;\r\n    }\r\n\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\nconst CaseHandler = {\r\n    'camel': (str) => camelCase(str),\r\n    'pascal': (str) => pascalCase(str),\r\n    'upper': (str) => str.toUpperCase(),\r\n    'lower': (str) => str.toLowerCase(),\r\n};\r\n\r\n/**\r\n * Format a sequence according to a specified case\r\n * @param {!string} str Sequence\r\n * @param {!string} casing Casing (camel, pascal, upper, lower)\r\n * @returns {string} Formatted sequence\r\n * @memberof STD\r\n */\r\nexport function formatCase(str, casing) {\r\n    if (isNullOrWhitespace(str)) {\r\n        return str;\r\n    }\r\n\r\n    if (!hasOwn(CaseHandler, casing)) {\r\n        return str;\r\n    }\r\n\r\n    return CaseHandler[casing](str);\r\n}\r\n\r\n/**\r\n * Capitalizes all words in a sequence except the first one and \r\n * removes spaces or punctuation\r\n * @param {!string} str Sequence\r\n * @returns {string} camelCased sequence\r\n * @memberof STD\r\n */\r\nexport function camelCase(str) {\r\n    if (isNullOrWhitespace(str)) {\r\n        return str;\r\n    }\r\n\r\n    var ccString = pascalCase(str);\r\n\r\n    return ccString.charAt(0).toLowerCase() + ccString.slice(1);\r\n}\r\n\r\n/**\r\n * Capitalizes all words in a sequence and removes spaces or punctuation\r\n * @param {!string} str Sequence\r\n * @returns {string} PascalCased sequence\r\n * @memberof STD\r\n */\r\nexport function pascalCase(str) {\r\n    if (isNullOrWhitespace(str)) {\r\n        return str;\r\n    }\r\n\r\n    var ccString = str.replace(/[_-]+/g, \" \").replace(/\\s+/g, ' ').trim();\r\n\r\n    return capitalize(ccString).replace(/\\s+/g, '');\r\n}\r\n\r\n/**\r\n * Removes all accents from a string\r\n * @param {!string} str A string\r\n * @returns {string} A string without accents\r\n * @memberof STD\r\n */\r\nexport function removeAccents(str) {\r\n    if (String.prototype.normalize) {\r\n        return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\r\n    }\r\n\r\n    return str.replace(/[àâäæ]/gi, 'a')\r\n        .replace(/[ç]/gi, 'c')\r\n        .replace(/[éèê]/gi, 'e')\r\n        .replace(/[îï]/gi, 'i')\r\n        .replace(/[ôœ]/gi, 'o')\r\n        .replace(/[ùûü]/gi, 'u');\r\n}\r\n\r\n/**\r\n * Verifies that a character is a vowel\r\n * @param {string} char String character\r\n */\r\nexport function isVowel(char) {\r\n    if (!isString(char)) {\r\n        return false;\r\n    }\r\n\r\n    return \"aeiou\".includes(char.toLowerCase());\r\n}\r\n\r\n/**\r\n * Verifies that a character is a consonant\r\n * @param {string} char String character\r\n */\r\nexport function isConsonant(char) {\r\n    if (!isString(char)) {\r\n        return false;\r\n    }\r\n\r\n    return \"bcdfghjklmnpqrstvwxyz\".includes(char.toLowerCase());\r\n}\r\n\r\n/**\r\n * Verifies that a character is uppercase\r\n * @param {string} char String character\r\n */\r\nexport function isUpperCase(char) {\r\n    if (!isString(char)) {\r\n        return false;\r\n    }\r\n\r\n    let charCode = char.charCodeAt(0);\r\n\r\n    return charCode >= 65 && charCode <= 90;\r\n}\r\n\r\n/**\r\n * Verifies that a character is lowercase\r\n * @param {string} char String character\r\n */\r\nexport function isLowerCase(char) {\r\n    if (!isString(char)) {\r\n        return false;\r\n    }\r\n\r\n    let charCode = char.charCodeAt(0);\r\n\r\n    return charCode >= 97 && charCode <= 122;\r\n}","import { isFunction } from \"./std-parse.js\";\r\n\r\n\r\n/**\r\n * Verifies that the condition is satisfied for a specified number (range) of value\r\n * @param {*[]} values Set of values\r\n * @param {Function} pred Condition\r\n * @param {number} [min=1] Minimum number of values that must satisfy the condition\r\n * @param {number} [max] Maximum number of values that must satisfy the condition\r\n * @returns {boolean} A value indicating whether the condition is satisfied for the specified range\r\n * @memberof STD\r\n */\r\nexport const assert = function (values, pred, min, max) {\r\n    if (!(Array.isArray(values) && isFunction(pred))) {\r\n        throw new TypeError(\"Bad argument\");\r\n    }\r\n\r\n    var hitCount = getHitCount(values, pred);\r\n\r\n    if (all([min, max], Number.isInteger)) {\r\n        if (max < min) {\r\n            throw new Error(\"Bad argument: max must be greater than min\");\r\n        }\r\n\r\n        return hitCount >= min && hitCount <= max;\r\n    }\r\n\r\n    if (Number.isInteger(min)) {\r\n        return hitCount >= min;\r\n    }\r\n\r\n    if (Number.isInteger(max)) {\r\n        return hitCount <= max;\r\n    }\r\n\r\n    return hitCount > 0;\r\n};\r\n\r\n/**\r\n * Verifies that at least one value satisfies the condition\r\n * @param {*[]} values Set of values\r\n * @param {Function} pred Condition\r\n * @returns {boolean} A value indicating whether at least one value satisfies the condition\r\n * @memberof STD\r\n */\r\nexport const some = function (values, pred) {\r\n    if (!(Array.isArray(values) && isFunction(pred))) {\r\n        throw new TypeError(\"Bad argument\");\r\n    }\r\n\r\n    for (let i = 0; i < values.length; i++) {\r\n        let value = values[i];\r\n\r\n        if (pred(...(Array.isArray(value) ? value : [value]))) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * Verifies that all the values satisfy the condition\r\n * @param {*[]} values Set of values\r\n * @param {Function} pred Condition\r\n * @returns {boolean} A value indicating whether all the values satisfy the condition\r\n * @memberof STD\r\n */\r\nexport const all = function (values, pred) {\r\n    if (!(Array.isArray(values) && isFunction(pred))) {\r\n        throw new TypeError(\"Bad argument\");\r\n    }\r\n\r\n    for (let i = 0; i < values.length; i++) {\r\n        let value = values[i];\r\n\r\n        if (!pred(...(Array.isArray(value) ? value : [value]))) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n/**\r\n * Verifies that exactly one value satisfies the condition\r\n * @param {*[]} values Set of values\r\n * @param {Function} pred Condition\r\n * @returns {boolean} A value indicating whether exactly one value satisfies the condition\r\n * @memberof STD\r\n */\r\nexport const one = function (values, pred) {\r\n    if (!(Array.isArray(values) && isFunction(pred))) {\r\n        throw new TypeError(\"Bad argument\");\r\n    }\r\n\r\n    return getHitCount(values, pred) === 1;\r\n};\r\n\r\n/**\r\n * Verifies that no value satisfies the condition\r\n * @param {*[]} values Set of values\r\n * @param {Function} pred Condition\r\n * @returns {boolean} A value indicating whether no value satisfies the condition\r\n * @memberof STD\r\n */\r\nexport const no = function (values, pred) {\r\n    if (!(Array.isArray(values) && isFunction(pred))) {\r\n        throw new TypeError(\"Bad argument\");\r\n    }\r\n\r\n    return getHitCount(values, pred) === 0;\r\n};\r\n\r\n/**\r\n * Verifies that at most one value satisfies the condition\r\n * @param {*[]} values Set of values\r\n * @param {Function} pred Condition\r\n * @returns {boolean} A value indicating whether at most one value satisfies the condition\r\n * @memberof STD\r\n */\r\nexport const lone = function (values, pred) {\r\n    if (!(Array.isArray(values) && isFunction(pred))) {\r\n        throw new TypeError(\"Bad argument\");\r\n    }\r\n\r\n    return getHitCount(values, pred) <= 1;\r\n};\r\n\r\n/**\r\n * Gets the number of values that satisfy the condition\r\n * @param {*[]} values \r\n * @param {Function} pred \r\n * @returns {number}\r\n * @private\r\n */\r\n/* istanbul ignore next */\r\nfunction getHitCount(values, pred) {\r\n    var counter = 0;\r\n\r\n    for (let i = 0; i < values.length; i++) {\r\n        let value = values[i];\r\n\r\n        if (pred(...(Array.isArray(value) ? value : [value]))) {\r\n            counter++;\r\n        }\r\n    }\r\n\r\n    return counter;\r\n}","import { isNullOrWhitespace, isNullOrUndefined } from './std-parse.js';\r\nimport { cloneObject } from './std-object.js';\r\n\r\n\r\n/**\r\n * Append the path to the current path\r\n * @param {string} target \r\n * @param {string} path \r\n * @param {string} [separator=\".\"] \r\n * @memberof STD\r\n */\r\nexport function addPath(target, path, separator = \".\") {\r\n    return isNullOrWhitespace(target) ? path : `${target}${separator}${path}`;\r\n}\r\n\r\n/**\r\n * Returns the directory of the path\r\n * @param {string} path \r\n * @param {string} [separator=\".\"] \r\n * @memberof STD\r\n */\r\nexport function getDir(path, separator = \".\") {\r\n    return path.substring(0, path.lastIndexOf(separator));\r\n}\r\n\r\n/**\r\n * Returns the directory of the path from the target\r\n * @param {string} path \r\n * @memberof STD\r\n */\r\nexport function getDirTarget(path, target) {\r\n    return path.substring(0, path.lastIndexOf(target) - 1);\r\n}\r\n\r\nfunction findByIndex(obj, match, prop) {\r\n    const REGEX_DIGIT = /\\d+/g;\r\n    var index = +match[0].match(REGEX_DIGIT);\r\n    return obj[prop][index];\r\n}\r\n\r\n/**\r\n * Returns an element in an object using its path\r\n * @param {Object} obj\r\n * @param {string} path  \r\n * @param {string} [separator=.]\r\n * @memberof STD\r\n */\r\nexport function findByPath(obj, path, separator = \".\") {\r\n    const REGEX_BRACKET_DIGIT = /\\[\\d+\\]/g;\r\n    const REGEX_BRACKET_WORD = /\\[\\w+\\]/g;\r\n\r\n    var me = cloneObject(obj);\r\n\r\n    const findHandler = function (part, regex, callback) {\r\n        var match = part.match(regex);\r\n        var prop = part.substring(0, part.indexOf('['));\r\n        return callback(me, match, prop);\r\n    };\r\n\r\n    var parts = path.split(separator);\r\n    for (let i = 0, len = parts.length; i < len; i++) {\r\n        let part = parts[i];\r\n\r\n        if (REGEX_BRACKET_DIGIT.test(part)) {\r\n            me = findHandler(part, REGEX_BRACKET_DIGIT, findByIndex);\r\n        } else {\r\n            me = me[part];\r\n        }\r\n\r\n        if (isNullOrUndefined(me)) {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    return me;\r\n}","import { valOrDefault, isString } from \"./std-parse.js\";\r\n\r\n\r\n/**\r\n * Converts the received boolean value to an integer\r\n * @param {boolean} value \r\n * @returns {number} 1 or 0\r\n * @memberof STD\r\n */\r\nexport function boolToInt(value) { return value ? 1 : 0; }\r\n\r\n/**\r\n * Converts the received value to a boolean\r\n * @param {*} value\r\n * @returns {boolean} A boolean equivalent of the received value\r\n * @memberof STD\r\n */\r\nexport function toBoolean(value) {\r\n    var val = valOrDefault(value, false);\r\n\r\n    return isString(val) && val.toLowerCase() === \"true\" || Number.isInteger(val) && val === 1 || val === true;\r\n}\r\n","/**\r\n * Creates a fetch request with a time limit to resolve the request\r\n * @param {URI} uri \r\n * @param {*} options \r\n * @param {number} time \r\n * @memberof STD\r\n */\r\nexport function fetchWithTimeout(uri, options = {}, time = 5000) {\r\n    // Lets set up our `AbortController`, and create a request options object\r\n    // that includes the controller's `signal` to pass to `fetch`.\r\n    const controller = new AbortController()\r\n    const config = { ...options, signal: controller.signal }\r\n\r\n    // Set a timeout limit for the request using `setTimeout`. If the body of this\r\n    // timeout is reached before the request is completed, it will be cancelled.\r\n    const timeout = setTimeout(() => {\r\n        controller.abort()\r\n    }, time)\r\n\r\n    return fetch(uri, config)\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(`${response.status}: ${response.statusText}`)\r\n            }\r\n\r\n            return response\r\n        })\r\n        .catch(error => {\r\n            // When we abort our `fetch`, the controller conveniently throws a named\r\n            // error, allowing us to handle them separately from other errors.\r\n            if (error.name === 'AbortError') {\r\n                throw new Error('Response timed out')\r\n            }\r\n\r\n            throw new Error(error.message)\r\n        })\r\n}","import { isEmpty } from \"./std-parse.js\";\r\n\r\n\r\n/**\r\n * Inserts an item in an array at the specified index\r\n * @param {*[]} array array\r\n * @param {number} index \r\n * @param {object} item \r\n * @returns {number} The new length of the array\r\n * @memberof STD\r\n */\r\nexport function insert(array, index, item) {\r\n    if (!(Array.isArray(array) && Number.isInteger(index))) {\r\n        throw new TypeError(\"Bad argument\");\r\n    }\r\n\r\n    array.splice(index, 0, item);\r\n\r\n    return array.length;\r\n}\r\n\r\n/**\r\n * Returns the last element of an array.\r\n * @param {*[]} array array\r\n * @memberof STD\r\n */\r\nexport function last(array) {\r\n    if (!Array.isArray(array)) {\r\n        throw new TypeError(\"Bad argument\");\r\n    }\r\n\r\n    if (isEmpty(array)) {\r\n        return undefined;\r\n    }\r\n\r\n    return array[array.length - 1];\r\n}\r\n\r\n/**\r\n * Returns the first element of an array.\r\n * @param {*[]} array array\r\n * @memberof STD\r\n */\r\nexport function first(array) {\r\n    if (!Array.isArray(array)) {\r\n        throw new TypeError(\"Bad argument\");\r\n    }\r\n\r\n    return array[0];\r\n}","/**\r\n * Return a random integer between min and max (inclusive).\r\n * @param {number} min \r\n * @param {number} [max] \r\n * @param {boolean} [secure] \r\n * @memberof STD\r\n*/\r\nexport function random(min, max, secure = false) {\r\n    if (!Number.isInteger(min)) {\r\n        throw new TypeError(\"Bad argument\");\r\n    }\r\n\r\n    if (!Number.isInteger(max)) {\r\n        max = min;\r\n        min = 0;\r\n    }\r\n\r\n    if (max < min) {\r\n        throw new Error(\"Bad argument: max must be greater than min\");\r\n    }\r\n\r\n    return min + Math.floor((secure ? secureMathRandom() : Math.random()) * (max - min + 1));\r\n}\r\n\r\n/**\r\n * More secure implementation of `Math.random`\r\n * @private\r\n */\r\nfunction secureMathRandom() {\r\n    // Divide a random UInt32 by the maximum value (2^32 -1) to get a result between 0 and 1\r\n    return window.crypto.getRandomValues(new Uint32Array(1))[0] / 4294967295;\r\n}"],"names":["valOrDefault","arg","value","isUndefined","isNullOrUndefined","isEmpty","obj","isIterable","length","isDate","Date","_typeof","Object","prototype","toString","call","isString","String","isFunction","isObject","Symbol","iterator","isNull","isNullOrWhitespace","test","resolveDate","useOffset","date","time","getTime","Number","isNaN","getTimezoneOffset","formatDate","format","twoDigits","val","dd","getDate","mm","getMonth","yyyy","getFullYear","hh","getHours","MM","getMinutes","ss","getSeconds","replace","slice","hasOwnProperty","isPrototypeOf","hasOwn","key","cloneObject","temp","constructor","capitalize","str","toLowerCase","s","toUpperCase","CaseHandler","camelCase","pascalCase","ccString","charAt","trim","all","values","pred","Array","isArray","TypeError","i","getHitCount","counter","findByIndex","match","prop","index","target","path","separator","min","max","hitCount","isInteger","Error","t1","t2","includes","arr1","split","arr2","uri","options","controller","AbortController","config","signal","setTimeout","abort","fetch","then","response","ok","status","statusText","error","name","message","part","regex","callback","REGEX_BRACKET_DIGIT","me","parts","len","substring","indexOf","array","casing","lastIndexOf","item","splice","char","child","parent","getPrototypeOf","charCode","charCodeAt","secure","Math","floor","window","crypto","getRandomValues","Uint32Array","random","normalize","_date"],"mappings":"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"}